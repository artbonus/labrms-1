<?php

namespace App;

use Carbon\Carbon;
use Auth;
use DB;
use App\ItemProfile;
use App\Pc;
use App\Ticket;
use App\Inventory;
use Illuminate\Database\Eloquent\Model;

class Pc extends \Eloquent{
	//Database driver
	/*
		1 - Eloquent (MVC Driven)
		2 - DB (Directly query to SQL database, no model required)
	*/
	//The table in the database used by the model.
	protected $table = 'pc';
	protected $primaryKey = 'id';
	public $timestamps = false;
	public $fillable = ['oskey','mouse','keyboard_id','systemunit_id','monitor_id','avr_id'];
	//Validation rules!
	public static $rules = array(
		'Operating System Key' => 'min:2|max:50|unique:pc,oskey',
		'avr' => 'exists:itemprofile,local_id',
		'Monitor' => 'exists:itemprofile,plocal_id',
		'System Unit' => 'required|exists:itemprofile,local_id',
		'Keyboard' => 'exists:itemprofile,local_id',
		'Mouse' => 'exists:itemprofile,local_id'
	);
	//Validation rules!
	public static $rules = array(
		'Operating System Key' => 'min:2|max:50|unique:pc,oskey',
		'avr' => 'nullable|exists:itemprofile,local_id',
		'Monitor' => 'nullable|exists:itemprofile,plocal_id',
		'System Unit' => 'nullable|exists:itemprofile,local_id',
		'Keyboard' => 'nullable|exists:itemprofile,local_id',
		'Mouse' => 'nullable|exists:itemprofile,local_id'
	);

	public function roominventory()
	{
		return $this->hasOne('App\RoomInventory','room_id','systemunit_id');
	}

	public function systemunit()
	{
		return $this->belongsTo('App\ItemProfile','systemunit_id','id');
	}

	public function monitor()
	{
		return $this->belongsTo('App\ItemProfile','monitor_id','id');
	}
	public function keyboard()
	{
		return $this->belongsTo('App\ItemProfile','keyboard_id','id');
	}

	public function avr()
	{
		return $this->belongsTo('App\ItemProfile','avr_id','id');
	}

	public function software()
	{
		return $this->belongsToMany('App\Software','pc_software','pc_id','software_id')
					->withPivot('softwarelicense_id')
					->withTimestamps();
	}

	public function ticket()
	{
		return $this->belongsToMany('App\Ticket','pc_ticket','pc_id','ticket_id');
	}

	public function scopeName($query,$value)
	{
		return $query->where('name','=',$value);
	}

    public static function separateArray($value)
    {
        return explode(',', $value);
    }

    public function assemble()
    {
    	$this->name = $this->generateWorkstationName();
		$this->save();

		$details = "";

		/*
		*
		*	Create a workstation ticket
		*	The current person who assembles the workstation will receive the ticket
		*	Details are autogenerated by the system
		*
		*/
		if(isset($this->name))
		{
			$details = 'Workstation ' . $this->name . ' assembled with the following propertynumber:';			
		}
		else
		{
			$details = 'Workstation assembled with the following propertynumber:';
		}

		if(isset($this->systemunit_id))
		{

			$details = $details . $this->systemunit_id . ' for System Unit. ' ;
		}

		if(isset($this->monitor_id))
		{
			$details = $details . $this->monitor_id . ' for Monitor. ';
		}

		if(isset($this->keyboard_id))
		{
			$details = $details . $this->keyboard_id . ' for Keyboard. ';
		}

		if(isset($this->avr_id))
		{
			$details = $details . $this->avr_id . ' for AVR. ';
		}

		if(isset($this->mouse_id))
		{
			$details = $details . $this->mouse_id . ' for mouse. ';
		}

		$ticketname = 'Workstation Assembly';
		$staffassigned = Auth::user()->id;

		$ticket = new Ticket;
		$ticket->tickettype = 'Receive';
		$ticket->ticketname = $ticketname;
		$ticket->details = $details;
		$ticket->staffassigned = $staffassigned;
		$ticket->status = 'Closed';
		$ticket->generate($this->id);
    }

    public function update()
    {

		$details = "";

		/*
		*
		*	Create a workstation ticket
		*	The current person who assembles the workstation will receive the ticket
		*	Details are autogenerated by the system
		*
		*/
		if(isset($this->name))
		{
			$details = 'Workstation ' . $this->name . ' update with the following propertynumber:';			
		}
		else
		{
			$details = 'Workstation assembled with the following propertynumber:';
		}

		if(isset($this->systemunit_id))
		{

			$details = $details . $this->systemunit_id . ' for System Unit. ' ;
		}

		if(isset($this->monitor_id))
		{
			$details = $details . $this->monitor_id . ' for Monitor. ';
		}

		if(isset($this->keyboard_id))
		{
			$details = $details . $this->keyboard_id . ' for Keyboard. ';
		}

		if(isset($this->avr_id))
		{
			$details = $details . $this->avr_id . ' for AVR. ';
		}

		if(isset($this->mouse_id))
		{
			$details = $details . $this->mouse_id . ' for mouse. ';
		}
		
    	$this->name = $this->generateWorkstationName();
		$this->save();

		$ticketname = 'Workstation Update';
		$staffassigned = Auth::user()->id;

		$ticket = new Ticket;
		$ticket->tickettype = 'Maintenance';
		$ticket->ticketname = $ticketname;
		$ticket->details = $details;
		$ticket->staffassigned = $staffassigned;
		$ticket->status = 'Closed';
		$ticket->generate($this->id);
    }

    public static function condemn($id,$systemunit,$monitor,$keyboard,$avr)
    {

    	$pc = Pc::find($id);

    	if($systemunit)
    	{
    		if(isset($pc->systemunit_id))
    		{	
    			Inventory::condemn($pc->systemunit_id);
    		}	
    	}

    	if($monitor)
    	{
    		if(isset($pc->monitor_id))
    		{
    			Inventory::condemn($pc->monitor_id);
    		}
    	}

    	if($keyboard)
    	{
    		if(isset($pc->keyboard_id))
    		{
    			Inventory::condemn($pc->keyboard_id);
    		}
    	}

    	if($avr)
    	{
    		if(isset($pc->avr_id))
    		{
    			Inventory::condemn($pc->avr_id);
    		}
    	}

		$ticketname = 'Workstation Condemn';
		$staffassigned = Auth::user()->id;
		$author = Auth::user()->firstname . " " . Auth::user()->middlename . " " . Auth::user()->lastname;
    	$details = `Workstation condemned on` . Carbon::now()->toDayDateTimeString() . 'by ' . $author;
    	Ticket::generatePcTicket($pc->id,'condemn',$ticketname,$details,$author,$staffassigned,null,'Closed');
    	$pc->delete();
    }

    /**
    *
    *	@param $object accepts object collection
    *	get the id from object
    *	returns null if no id
    *
    */
    public static function getID($object)
    {
    	if(isset($object->id))
    	{
    		$object = $object->id;
    		return $object;
    	}

		return null;
    }

    /**
    *
    *	@param $propertynumber of item
    *	@return null or pc details
    *
    */
    public static function isPc($tag)
    {
		    
		/*
		|--------------------------------------------------------------------------
		|
		| 	Check if propertynumber exists
		|
		|--------------------------------------------------------------------------
		|
		*/
		$item = ItemProfile::propertyNumber($tag)->first();
    	if( count($item) > 0) 
    	{
		    
			/*
			|--------------------------------------------------------------------------
			|
			| 	get property number id
			|
			|--------------------------------------------------------------------------
			|
			*/
    		$id = Pc::getID($item);
		    
			/*
			|--------------------------------------------------------------------------
			|
			| 	query if id is in pc
			|
			|--------------------------------------------------------------------------
			|
			*/
	    	$pc = Pc::where('systemunit_id', '=', $id)
	    		->orWhere('monitor_id','=',$id)
	    		->orWhere('avr_id','=',$id)
	    		->orWhere('keyboard_id','=',$id)
	    		->first();
		    
			/*
			|--------------------------------------------------------------------------
			|
			| 	Check if pc exists 
			|	If existing return id
			|	return null if not
			|
			|--------------------------------------------------------------------------
			|
			*/
	    	if(count($pc) > 0 )
	    	{
	    		return $pc;
	    	}
	    	else
	    	{

				/*
				|--------------------------------------------------------------------------
				|
				| 	If it doesnt exists
				|	check if the tag is pc name
				|	return null if not
				|
				|--------------------------------------------------------------------------
				|
				*/
				if(count($pc = Pc::name($tag)->first()) > 0)
				{
					return $pc;
				}

	    		return null;
	    	}
    	} 
    	else 
    	{
		    
			/*
			|--------------------------------------------------------------------------
			|
			| 	If it doesnt exists
			|	check if the tag is pc name
			|	return null if not
			|
			|--------------------------------------------------------------------------
			|
			*/
			$pc = Pc::name($tag)->first();
			if(count($pc) > 0)
			{
				return $pc;
			}
			
			return null;
    	}
    }

    /**
    *
    *	@param $id accepts pc id
    *	@param $status accepts status to set 'for repair' 'working' 'condemned'
    *	@param $monitor accepts monitor
    *	@param $keyboard accepts keyboard
    *	@param $avr accepts avr
    *	@param $system unit accepts system unit
    *	@return pc information
    *
    */
    public static function setItemStatus($id,$status,$monitor = true, $keyboard = true, $avr = true, $systemunit = true)
    {
    	$pc = Pc::find($id);
 		DB::transaction(function() use ($pc,$status,$avr,$systemunit,$keyboard,$monitor){
			/*
			|--------------------------------------------------------------------------
			|
			| 	System Unit
			|
			|--------------------------------------------------------------------------
			|
			*/
	    	if($systemunit)
	    	{
	    		if( isset($pc->systemunit_id) )
	    		{
	    			ItemProfile::setItemStatus($pc->systemunit_id,$status);
	    		}
	    	}

	 		/*
			|--------------------------------------------------------------------------
			|
			| 	Monitor
			|
			|--------------------------------------------------------------------------
			|
			*/
	    	if($monitor)
	    	{
	    		if( isset($pc->monitor_id) )
	    		{
	    			ItemProfile::setItemStatus($pc->monitor_id,$status);
	    		}
	    	}

			/*
			|--------------------------------------------------------------------------
			|
			| 	Keyboard
			|
			|--------------------------------------------------------------------------
			|
			*/
	    	if($keyboard)
	    	{
	    		if( isset($pc->keyboard_id) )
	    		{
	    			ItemProfile::setItemStatus($pc->keyboard_id,$status);
	    		}
	    	}

			/*
			|--------------------------------------------------------------------------
			|
			| 	AVR
			|
			|--------------------------------------------------------------------------
			|
			*/
	    	if($avr)
	    	{
	    		if( isset($pc->avr_id) )
	    		{
	    			ItemProfile::setItemStatus($pc->avr_id,$status);
	    		}
	    	}
	    });

		/*
		|--------------------------------------------------------------------------
		|
		| 	PC Information
		|
		|--------------------------------------------------------------------------
		|
		*/
    	return $pc;
    }

    /**
    *
    *	@param $pc is a comma separated id of each pc
    *	@param room accepts room name
    *
    */
    public static function setPcLocation($pc,$room)
    {

		$pc = Pc::find($pc);
		if(isset($pc->systemunit_id))
		{
			ItemProfile::setLocation($pc->systemunit_id,$room);
		}

		if(isset($pc->avr_id))
		{
			ItemProfile::setLocation($pc->avr_id,$room);
		}

		if(isset($pc->keyboard_id))
		{
			ItemProfile::setLocation($pc->keyboard_id,$room);
		}

		if(isset($pc->monitor_id))
		{
			ItemProfile::setLocation($pc->monitor_id,$room);
		}

		/*
		*
		*	create a transfer ticket
		*
		*/
		$details = "Pc location has been set to $room";
		$staffassigned = Auth::user()->id;

		$ticket = new Ticket;
		$ticket->tickettype = 'Transfer';
		$ticket->ticketname = 'Set Item Location';
		$ticket->details = $details;
		$ticket->staffassigned = $staffassigned;
		$ticket->status = 'Closed';
		$ticket->generate($pc->id);
    }

    /*
    *
    * generate workstation name
    *
    */
    public function generateWorkstationName($id = null)
    {
    	$cons = 'WS';

    	if(isset($this->id))
    	{
    		$id = $this->id;
    	} 
    	else if($id == null || !isset($id) || $id == "")
    	{
    		$id = Pc::count();
    	}

    	$id = '-' . $id;

    	$location = "";

    	if( isset($this->location) && $this->location != null )
    	{
    		$location = '-' . $this->location;
    	}

    	return $cost . $location . $id;
    }
}
